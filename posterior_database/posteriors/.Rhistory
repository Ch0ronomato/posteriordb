stan_model_code <- readLines("~/job/cmdstan-warmup/examples/diamonds/diamonds.stan")
# Posterior
posterior_keywords <- c("stan_benchmark","linear regression")
posterior_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
posterior_references <- c("bales2019selecting","wickham2016ggplot2")
dimensions <- list(b = 24L, Intercept = 1L, sigma = 1L)
posterior_name <- paste0(data_name, "-", model_name)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Add model to pdb ----
mi <- list(name = model_name,
keywords = model_keywords,
title = model_title,
prior = list(keywords = model_prior_keywords),
description = model_description,
urls = model_urls,
model_implementations =
list(stan = list(model_code = paste0("models/stan/", model_name, ".stan"))),
references = model_references,
added_date = Sys.Date(),
added_by = added_by)
class(mi) <- "pdb_model_info"
posteriordb:::assert_model_info(x = mi)
# Create stan model----
sc <- rstan::stan_model(model_name = model_name, model_code = stan_model_code)
checkmate::assert_class(sc, classes = "stanmodel")
# Add posterior to pdb ----
po <- list(name = paste0(data_name, "-", model_name),
keywords = posterior_keywords,
urls = posterior_urls,
model_name = model_name,
data_name = data_name,
reference_posterior_name = NULL,
references = posterior_references,
dimensions = dimensions,
model_info = mi,
data_info = di,
pdb = pdb,
added_date = Sys.Date(),
added_by = added_by)
class(po) <- "pdb_posterior"
posteriordb:::assert_pdb_posterior(po)
# Write objects to pdb ----
write_pdb(di, pdb, overwrite = TRUE)
write_pdb(dat, pdb, name = data_name, overwrite = TRUE)
write_pdb(mi, pdb, overwrite = TRUE)
write_pdb(sc, pdb, overwrite = TRUE)
write_pdb(po, pdb, overwrite = TRUE)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# Posterior to compute
posterior_name <- "diamonds-diamonds"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
setwd("~/job/posteriordb/posterior_database/posteriors/")
# Posterior to compute
posterior_name <- "kilpisjarvi_mod-kilpisjarvi"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "diamonds-diamonds.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "diamonds-diamonds"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "mcycle_gp-accel_gp.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
setwd("~/job/posteriordb/posterior_database/posteriors/")
# Posterior to compute
posterior_name <- "mcycle_gp-accel_gp.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
setwd("~/job/posteriordb/posterior_database/posteriors/")
# Posterior to compute
posterior_name <- "mcycle_gp-accel_gp.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "mcycle_gp-accel_gp"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "mcycle_splines-accel_splines"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "nes1972"
data_keywords <- c("ARM", "Ch. 4", "stan_examples")
data_title <- "Data from the National Election Study"
data_description <- "- N: number of observations
- age_discrete: age category { 1: 18-29, 2: 30-44, 3: 45-64, 4: 65+ }
- educ1: education { 1: no high school, 2: high school graduate, 3: some college, 4: college graduate }
- gender: { 0: male, 1: female }
- income: income percentile { 1: 0-16th, 2: 17-33rd, 3: 34-67th, 4: 68-95th 5: 96-100th }
- partyid7: party identification { 1: strong Democrat, 2: Democrat, 3: weak Democrat, 4: independent, 5: weak Republican, 6: Republican, 7: strong Republican }
- race_adj: ethnicity { 0: white,  1: black, 0.5: other }
- real_ideo: political ideology { 1: strong liberal, 2: liberal, ..., 7: strong conservative }
- year: 1972 or 1976 or 1980 or 1984 or 1988 or 1992 or 1996 or 2000"
data_urls <- c("https://github.com/stan-dev/example-models/tree/master/ARM/Ch.4")
data_references <- "gelman2006data"
# Data
txt <- readLines("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes1972.data.R")
eval(parse(text = txt));
dat <- list(N = N, age_discrete = age_discrete, educ1 = educ1, gender = gender, income = income,
partyid7 = partyid7, race_adj = race_adj, real_ideo = real_ideo, year = year)
# Model
model_name <- "nes1972"
model_keywords <- c("ARM", "Ch. 4", "stan_examples")
model_title <- "Multiple Predictor Linear Model"
model_description <- "partyid7 ~ real_ideo + race_adj + age30_44 + age45_64 + age65up + educ1 + gender + income"
model_urls <- c("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes.stan")
model_references <- "gelman2006data"
model_prior_keywords <- "stan_recommended_35dbfe6"
# Model code
stan_model_code <- readLines("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes.stan")
# Posterior
posterior_keywords <- c("ARM", "Ch. 4", "stan_examples")
posterior_urls <- c("https://github.com/stan-dev/example-models/tree/master/ARM/Ch.4")
posterior_references <- c("gelman2006data")
dimensions <- list(beta = 9L, sigma = 1L)
posterior_name <- paste0(data_name, "-", model_name)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Add model to pdb ----
mi <- list(name = model_name,
keywords = model_keywords,
title = model_title,
prior = list(keywords = model_prior_keywords),
description = model_description,
urls = model_urls,
model_implementations =
list(stan = list(model_code = paste0("models/stan/", model_name, ".stan"))),
references = model_references,
added_date = Sys.Date(),
added_by = added_by)
class(mi) <- "pdb_model_info"
posteriordb:::assert_model_info(x = mi)
# Create stan model----
sc <- rstan::stan_model(model_name = model_name, model_code = stan_model_code)
checkmate::assert_class(sc, classes = "stanmodel")
# Add posterior to pdb ----
po <- list(name = paste0(data_name, "-", model_name),
keywords = posterior_keywords,
urls = posterior_urls,
model_name = model_name,
data_name = data_name,
reference_posterior_name = NULL,
references = posterior_references,
dimensions = dimensions,
model_info = mi,
data_info = di,
pdb = pdb,
added_date = Sys.Date(),
added_by = added_by)
class(po) <- "pdb_posterior"
posteriordb:::assert_pdb_posterior(po)
# Write objects to pdb ----
write_pdb(di, pdb, overwrite = TRUE)
write_pdb(dat, pdb, name = data_name, overwrite = TRUE)
write_pdb(mi, pdb, overwrite = TRUE)
write_pdb(sc, pdb, overwrite = TRUE)
write_pdb(po, pdb, overwrite = TRUE)
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "nes1972"
data_keywords <- c("ARM", "Ch. 4", "stan_examples")
data_title <- "Data from the National Election Study"
data_description <- "- N: number of observations
- age_discrete: age category { 1: 18-29, 2: 30-44, 3: 45-64, 4: 65+ }
- educ1: education { 1: no high school, 2: high school graduate, 3: some college, 4: college graduate }
- gender: { 0: male, 1: female }
- income: income percentile { 1: 0-16th, 2: 17-33rd, 3: 34-67th, 4: 68-95th 5: 96-100th }
- partyid7: party identification { 1: strong Democrat, 2: Democrat, 3: weak Democrat, 4: independent, 5: weak Republican, 6: Republican, 7: strong Republican }
- race_adj: ethnicity { 0: white,  1: black, 0.5: other }
- real_ideo: political ideology { 1: strong liberal, 2: liberal, ..., 7: strong conservative }
- year: 1972 or 1976 or 1980 or 1984 or 1988 or 1992 or 1996 or 2000"
data_urls <- c("https://github.com/stan-dev/example-models/tree/master/ARM/Ch.4")
data_references <- "gelman2006data"
# Data
txt <- readLines("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes1972.data.R")
eval(parse(text = txt));
dat <- list(N = N, age_discrete = age_discrete, educ1 = educ1, gender = gender, income = income,
partyid7 = partyid7, race_adj = race_adj, real_ideo = real_ideo, year = year)
# Model
model_name <- "nes"
model_keywords <- c("ARM", "Ch. 4", "stan_examples")
model_title <- "Multiple Predictor Linear Model"
model_description <- "partyid7 ~ real_ideo + race_adj + age30_44 + age45_64 + age65up + educ1 + gender + income"
model_urls <- c("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes.stan")
model_references <- "gelman2006data"
model_prior_keywords <- "stan_recommended_35dbfe6"
# Model code
stan_model_code <- readLines("https://raw.githubusercontent.com/stan-dev/example-models/master/ARM/Ch.4/nes.stan")
# Posterior
posterior_keywords <- c("ARM", "Ch. 4", "stan_examples")
posterior_urls <- c("https://github.com/stan-dev/example-models/tree/master/ARM/Ch.4")
posterior_references <- c("gelman2006data")
dimensions <- list(beta = 9L, sigma = 1L)
posterior_name <- paste0(data_name, "-", model_name)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Add model to pdb ----
mi <- list(name = model_name,
keywords = model_keywords,
title = model_title,
prior = list(keywords = model_prior_keywords),
description = model_description,
urls = model_urls,
model_implementations =
list(stan = list(model_code = paste0("models/stan/", model_name, ".stan"))),
references = model_references,
added_date = Sys.Date(),
added_by = added_by)
class(mi) <- "pdb_model_info"
posteriordb:::assert_model_info(x = mi)
# Create stan model----
sc <- rstan::stan_model(model_name = model_name, model_code = stan_model_code)
checkmate::assert_class(sc, classes = "stanmodel")
# Add posterior to pdb ----
po <- list(name = paste0(data_name, "-", model_name),
keywords = posterior_keywords,
urls = posterior_urls,
model_name = model_name,
data_name = data_name,
reference_posterior_name = NULL,
references = posterior_references,
dimensions = dimensions,
model_info = mi,
data_info = di,
pdb = pdb,
added_date = Sys.Date(),
added_by = added_by)
class(po) <- "pdb_posterior"
