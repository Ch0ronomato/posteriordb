warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
library(MASS)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "diamonds"
data_keywords <- c("ggplot2", "tidyverse")
data_title <- "Diamonds data frame for brms generated by brms::make_standata"
data_description <- "ggplot2 Diamonds data set for brms"
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
data_references <- "wickham2016ggplot2"
library(tidyverse)
library(ggplot2)
library(brms)
library(rstan)
data("diamonds", package = "ggplot2")
diamonds_reduced = diamonds %>% filter(z > 0) %>% sample_n(5000)
code = make_stancode(log(price) ~ carat * (log(x) + log(y) + log(z)) + cut + color + clarity,
data = diamonds_reduced, prior = prior(normal(0.0, 1)))
data = make_standata(log(price) ~ carat * (log(x) + log(y) + log(z)) + cut + color + clarity,
data = diamonds_reduced)
write(code, "diamonds.stan")
stan_rdump(names(data), file="diamonds.dat", env = list2env(data))
library(tidyverse)
library(ggplot2)
library(brms)
library(rstan)
data("diamonds", package = "ggplot2")
diamonds_reduced = diamonds %>% filter(z > 0) %>% sample_n(5000)
library(tidyverse)
installed.packages("tidyverse")
installe.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
z
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(brms)
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(ggplot2)
library(brms)
library(rstan)
library(tidyverse)
diamonds_reduced = diamonds %>% filter(z > 0) %>% sample_n(5000)
code = make_stancode(log(price) ~ carat * (log(x) + log(y) + log(z)) + cut + color + clarity,
data = diamonds_reduced, prior = prior(normal(0.0, 1)))
data = make_standata(log(price) ~ carat * (log(x) + log(y) + log(z)) + cut + color + clarity,
data = diamonds_reduced)
write(code, "diamonds.stan")
stan_rdump(names(data), file="diamonds.dat", env = list2env(data))
library(rstan)
library(posteriordb)
library(posterior)
library(MASS)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "diamonds"
data_keywords <- c("ggplot2", "tidyverse")
data_title <- "Diamonds data frame for brms generated by brms::make_standata"
data_description <- "ggplot2 Diamonds data set for brms"
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
data_references <- "wickham2016ggplot2"
# Data
txt <- readLines("~/job/cmdstan-warmup/examples/diamonds/")
# Data
txt <- readLines("~/job/cmdstan-warmup/examples/diamonds/diamonds.dat")
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "diamonds"
data_keywords <- c("ggplot2", "tidyverse")
data_title <- "Diamonds data frame for brms generated by brms::make_standata"
data_description <- "ggplot2 Diamonds data set for brms"
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
data_references <- "wickham2016ggplot2"
# Data
txt <- readLines("~/job/cmdstan-warmup/examples/diamonds/diamonds.dat")
eval(parse(text = txt));
dat <- list(N = N, Y = Y, K = K, X = X, prior_only = prior_only)
data(diamonds)
diamonds
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "diamonds"
data_keywords <- c("ggplot2", "tidyverse")
data_title <- "Diamonds data frame for brms generated by brms::make_standata"
data_description <- "ggplot2 Diamonds data set for brms"
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
data_references <- "wickham2016ggplot2"
# Data
txt <- readLines("~/job/cmdstan-warmup/examples/diamonds/diamonds.dat")
eval(parse(text = txt));
dat <- list(N = N, Y = Y, K = K, X = X, prior_only = prior_only)
# Model
model_name <- "diamonds"
model_keywords <- c("stan_benchmark","linear regression")
model_title <- "Multiple Highly Correlated Predictors Log-Log Model"
model_description <- "log(price) ~ carat * (log(x) + log(y) + log(z)) + cut + color + clarity"
model_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
model_references <- "bales2019selecting"
model_prior_keywords <- "stan_recommended_35dbfe6"
# Model code
stan_model_code <- readLines("~/job/cmdstan-warmup/examples/diamonds/diamonds.stan")
# Posterior
posterior_keywords <- c("stan_benchmark","linear regression")
posterior_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/diamonds")
posterior_references <- c("bales2019selecting","wickham2016ggplot2")
dimensions <- list(b = 24L, Intercept = 1L, sigma = 1L)
posterior_name <- paste0(data_name, "-", model_name)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Add model to pdb ----
mi <- list(name = model_name,
keywords = model_keywords,
title = model_title,
prior = list(keywords = model_prior_keywords),
description = model_description,
urls = model_urls,
model_implementations =
list(stan = list(model_code = paste0("models/stan/", model_name, ".stan"))),
references = model_references,
added_date = Sys.Date(),
added_by = added_by)
class(mi) <- "pdb_model_info"
posteriordb:::assert_model_info(x = mi)
# Create stan model----
sc <- rstan::stan_model(model_name = model_name, model_code = stan_model_code)
checkmate::assert_class(sc, classes = "stanmodel")
# Add posterior to pdb ----
po <- list(name = paste0(data_name, "-", model_name),
keywords = posterior_keywords,
urls = posterior_urls,
model_name = model_name,
data_name = data_name,
reference_posterior_name = NULL,
references = posterior_references,
dimensions = dimensions,
model_info = mi,
data_info = di,
pdb = pdb,
added_date = Sys.Date(),
added_by = added_by)
class(po) <- "pdb_posterior"
posteriordb:::assert_pdb_posterior(po)
# Write objects to pdb ----
write_pdb(di, pdb, overwrite = TRUE)
write_pdb(dat, pdb, name = data_name, overwrite = TRUE)
write_pdb(mi, pdb, overwrite = TRUE)
write_pdb(sc, pdb, overwrite = TRUE)
write_pdb(po, pdb, overwrite = TRUE)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# Posterior to compute
posterior_name <- "diamonds-diamonds"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "radon_mod"
data_keywords <- c("stan_examples","ARM","Ch. 22")
data_title <- "- N: number of observations
- J: number of counties
- x: floor measurements
- y: log-radon measurements
- u: county uranium reading
- county: counties
- holdout: is in holdout set"
data_description <- "Modified Radon data set containing data of radon levels in three hundred eighty-six different counties in the USA."
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/radon")
data_references <- "gelman2006data"
# Data
txt <- readLines("https://raw.githubusercontent.com/bbbales2/cmdstan-warmup/develop/examples/radon/radon.dat")
eval(parse(text = txt));
dat <- list(N = N, J = J, x = x, y = y, u = u, county = county, holdout = holdout)
# Model
model_name <- "radon_county"
model_keywords <- c("stan_benchmark","hierarchical model")
dat
N
J
# Model
model_name <- "radon_county"
model_keywords <- c("stan_benchmark","hierarchical model")
model_title <- "Hierarchical Model"
model_description <- "y ~ (1|county)"
model_urls <- c("https://raw.githubusercontent.com/bbbales2/cmdstan-warmup/develop/examples/radon/radon.stan")
model_references <- "bales2019selecting"
model_prior_keywords <- "stan_recommended_35dbfe6"
# Model code
stan_model_code <- readLines("https://raw.githubusercontent.com/bbbales2/cmdstan-warmup/develop/examples/radon/radon.stan")
# Posterior
posterior_keywords <- c("stan_benchmark","hierarchical model")
posterior_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/radon")
posterior_references <- c("gelman2006data","bales2019selecting")
dimensions <- list(a = 386L, mu_a = 1L, sigma_a = 1L, sigma_y = 1L)
posterior_name <- paste0(data_name, "-", model_name)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Add model to pdb ----
mi <- list(name = model_name,
keywords = model_keywords,
title = model_title,
prior = list(keywords = model_prior_keywords),
description = model_description,
urls = model_urls,
model_implementations =
list(stan = list(model_code = paste0("models/stan/", model_name, ".stan"))),
references = model_references,
added_date = Sys.Date(),
added_by = added_by)
class(mi) <- "pdb_model_info"
posteriordb:::assert_model_info(x = mi)
# Create stan model----
sc <- rstan::stan_model(model_name = model_name, model_code = stan_model_code)
checkmate::assert_class(sc, classes = "stanmodel")
# Add posterior to pdb ----
po <- list(name = paste0(data_name, "-", model_name),
keywords = posterior_keywords,
urls = posterior_urls,
model_name = model_name,
data_name = data_name,
reference_posterior_name = NULL,
references = posterior_references,
dimensions = dimensions,
model_info = mi,
data_info = di,
pdb = pdb,
added_date = Sys.Date(),
added_by = added_by)
class(po) <- "pdb_posterior"
posteriordb:::assert_pdb_posterior(po)
# Write objects to pdb ----
write_pdb(di, pdb, overwrite = TRUE)
write_pdb(dat, pdb, name = data_name, overwrite = TRUE)
write_pdb(mi, pdb, overwrite = TRUE)
write_pdb(sc, pdb, overwrite = TRUE)
write_pdb(po, pdb, overwrite = TRUE)
library(rstan)
library(posteriordb)
library(posterior)
# General info
added_by <- "Oliver"
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
setwd("~/job/posteriordb/posterior_database/posteriors/")
# Posterior to compute
posterior_name <- "radon_mod-radon_county.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "radon_mod-radon_county"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "kilpisjarvi_mod-kilpisjarvi.json"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
# Posterior to compute
posterior_name <- "kilpisjarvi_mod-kilpisjarvi"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
library(rstan)
library(posteriordb)
library(posterior)
pdb <- pdb_local("~/job/posteriordb/posterior_database/")
# General info
added_by <- "Oliver Järnefelt"
# Data info
data_name <- "kilpisjarvi_mod"
data_keywords <- c("finnish meteorological institute", "time series")
data_title <- "- N: number of observations
- x: year
- y: average temperature of summer"
data_description <- "Modified Kilpisjarvi data set with larger x values to enhance correlatedness of model parameters"
data_urls <- c("https://github.com/bbbales2/cmdstan-warmup/blob/develop/examples/kilpisjarvi")
data_references <- "bales2019selecting"
# Data
txt <- readLines("https://raw.githubusercontent.com/bbbales2/cmdstan-warmup/develop/examples/kilpisjarvi/kilpisjarvi.dat")
eval(parse(text = txt));
dat <- list(N = N, x = x, y = y, xpred = xpred, pmualpha = pmualpha, psalpha = psalpha, pmubeta = pmubeta,
psbeta = psbeta)
## Create objects ----
# Create data object
class(dat) <- c("pdb_data", "list")
posteriordb:::assert_data(dat)
# Create data_info_object ----
di <- list(name = data_name,
keywords = data_keywords,
title = data_title,
description = data_description,
urls = data_urls,
data_file = paste0("data/data/", data_name, ".json"),
references = data_references,
added_date = Sys.Date(),
added_by = added_by)
class(di) <- "pdb_data_info"
posteriordb:::assert_data_info(di)
# Write objects to pdb ----
write_pdb(di, pdb, overwrite = TRUE)
write_pdb(dat, pdb, name = data_name, overwrite = TRUE)
# Posterior to compute
posterior_name <- "kilpisjarvi_mod-kilpisjarvi"
# Compute reference_posterior for a pdb entry ----
# Setup reference_posterior
rpi     <- list(name = posterior_name,
inference = list(
method = "stan_sampling",
method_arguments =
list(chains = 5, #10
iter = 2000, #30000
warmup = 1000, #10000
thin = 2,
seed = 4711,
control = list(adapt_delta = 0.9))),
diagnostics = NULL,
#comments = NULL,
added_by = added_by,
added_date = Sys.Date(),
versions = list(rstan_version = paste("rstan", utils::packageVersion("rstan")),
r_Makevars = paste(readLines("~/.R/Makevars"), collapse = "\n"), # This works for macosx
r_version = R.version$version.string,
r_session = paste(capture.output(print(sessionInfo())), collapse = "\n"))
)
class(rpi) <- "pdb_reference_posterior_info"
# Compute reference_posterior
rpd <- posteriordb:::compute_reference_posterior_draws_stan_sampling(rpi, pdb)
